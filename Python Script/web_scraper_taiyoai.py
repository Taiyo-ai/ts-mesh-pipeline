# -*- coding: utf-8 -*-
"""Web Scraper TaiyoAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lT7tFWT3osHaUnxFm6OC6gb_PKejggYz
"""

# importing all the neccessary libraries
from bs4 import BeautifulSoup
import requests
import lxml.html as lh
import pandas as pd
from google.colab import files


class MyClass:
    def __init__(self, **kwargs):
        self.config = kwargs.get("config")

    def extract_data(self):
        # Extracting Table rows
        url = "https://www.bls.gov/news.release/empsit.b.htm"
        result = requests.get(url)
        doc = lh.fromstring(result.content)
        tr_elements = doc.xpath("//tr")
        return tr_elements

    def load_data(self):
        # Create empty list
        tr_elements = self.extract_data()
        col = []
        i = 0
        # For each row, store each first element (header) and an empty list
        for t in tr_elements[0]:
            i += 1
            name = t.text_content()

            col.append((name, []))

            # Since out first row is the header, data is stored on the second row onwards
        for j in range(1, len(tr_elements)):
            # T is our j'th row
            T = tr_elements[j]

            # If row is not of size 10, the //tr data is not from our table
            if len(T) != 5:
                continue

                # i is the index of our column
            i = 0

            # Iterate through each element of the row
            for t in T.iterchildren():
                data = t.text_content()
                # Check if row is empty
                if i > 0:
                    # Convert any numerical value to integers
                    try:
                        data = int(data)
                    except:
                        pass
                # Append the data to the empty list of the i'th column
                col[i][1].append(data)
                # Increment i for the next column
                i += 1
        # Adding the rows and columns to a Dataframe
        Dict = {title: column for (title, column) in col}
        df = pd.DataFrame(Dict)
        df.head()

        return df

    def save_data(self):
        # Saving the dataframe to csv file and downloading
        df = self.load_data()
        df.to_csv("TableData.csv")
        files.download("/content/TableData.csv")
        return None

    def run(self):
        self.save_data()
        return None


if __name__ == "__main__":
    config = {}
    obj = MyClass(config=config)
    obj.run()
